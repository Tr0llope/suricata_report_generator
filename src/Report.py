from datetime import datetime
from JsonParsing import SuricataJsonParser
import getpass

# This class is used to generate the structure of the report. Each method corresponds to a section of the report.
class ReportBuilder ():
    def __init__(self, data, output_file):
        self.data = data
        self.output_file = output_file
        self.parser = SuricataJsonParser(data, output_file)
    
    def introduction(self, file_name):
        title = "**Report on the network traffic data contained in {}**\n".format(file_name)
        self.output_file.write("="*len(title)+"\n" + title + "="*len(title)+"\n\n")

        # Add the logo of the school
        self.output_file.write(".. image:: ../data/logo-esiea.jpeg\n")
        self.output_file.write("   :scale: 30%\n")
        self.output_file.write("   :align: center\n\n|\n\n")
        
        self.output_file.write("The following report is based on the alerts generated by Suricata.\n\n")

        # This information allows the reader to know who generated the report and when, which is useful for the traceability of the report
        self.output_file.write("It was generated by {} on {}\n\n|\n\n".format(getpass.getuser(), datetime.now().strftime('%Y-%m-%d %H:%M:%S')))

        # Add a disclaimer, which is a warning to the reader because the report is very likely to be incomplete
        self.output_file.write(".. admonition:: Disclaimer\n\n")
        self.output_file.write("   This report is a tool for analyzing traffic activity; it does not guarantee exhaustive detection.\n\n")
        
        # Add a table of contents
        self.output_file.write("----\n\n")
        self.output_file.write(".. sectnum::\n\n")
        self.output_file.write(".. contents:: Contents\n\n\n")
        self.output_file.write("----\n\n")

    # print the time of the analysis
    def set_time(self):
        start_timestamp = datetime.strptime(self.data[0]["timestamp"], '%Y-%m-%dT%H:%M:%S.%f%z').strftime('%Y-%m-%d %H:%M:%S')
        end_timestamp = datetime.strptime(self.data[-1]["timestamp"], '%Y-%m-%dT%H:%M:%S.%f%z').strftime('%Y-%m-%d %H:%M:%S')    
        diff = datetime.strptime(end_timestamp, '%Y-%m-%d %H:%M:%S') - datetime.strptime(start_timestamp, '%Y-%m-%d %H:%M:%S')
        self.output_file.write("Time\n"+"~~~~\n\n")
        self.output_file.write("The analyzed alerts were generated between {} and {}\n\n".format(start_timestamp, end_timestamp))
        self.output_file.write("The total time of the analysis was {}\n\n|\n\n".format(diff))

    # print the ip addresses if there are private
    def set_ip_addresses_info(self):
        title = "Characteristics of IP addresses\n"
        self.output_file.write(title+"~"*len(title)+ "\n\n")
        self.output_file.write("We can notice that some private IP addresses are used: \n\n")
        self.output_file.write("="*16 +" "+ "="*28 + " "+ "="*40 + "\n")
        self.output_file.write("Address          Network                      Probable operating systems\n")
        self.output_file.write("="*16 +" "+ "="*28 + " "+ "="*40 + "\n")
        self.parser.get_private_ip_addresses()
        self.output_file.write("="*16 +" "+ "="*28 + " "+ "="*40 + "\n\n|\n\n")
    
    # print the windows domain names 
    def set_domain_names_info(self):
        title = "Domain names\n"
        self.output_file.write(title+"~"*len(title)+ "\n\n")
        self.output_file.write("The following domain names were requested:\n\n")
        self.output_file.write("="*69 + " " + "="*70 + "\n")
        self.parser.get_domain_names()
        self.output_file.write("="*69 + " " + "="*70 + "\n")
        self.output_file.write("\n\n|\n\n")
    
    # print the users
    def set_users_info(self):
        title = "Users\n"
        self.output_file.write(title+"~"*len(title)+ "\n\n")
        self.parser.get_users_from_smb_kerberos_requests()
        self.output_file.write("\n\n|\n\n")

    # print the tcp/ip services
    def set_tcp_ip_services_info(self):
        title = "TCP/IP services\n"
        self.output_file.write(title+"~"*len(title)+ "\n\n")
        self.output_file.write("The following services have been used:\n\n")
        self.parser.get_tcp_ip_services()
        self.output_file.write("\n\n|\n\n")
    
    # print the alerted signatures
    def set_alerted_signatures(self):
        title = "Alerted signatures\n"
        self.output_file.write(title+"~"*len(title)+ "\n\n")
        self.output_file.write("Here are the various signatures that have been alerted:\n\n")
        self.parser.get_alerted_signatures()
        self.output_file.write("\n\n|\n\n")
    
    # print the detected malwares with associated IOC and hashes
    def set_detected_malwares(self):
        title = "Detected malwares\n"
        self.output_file.write(title+"~"*len(title)+ "\n\n")
        self.parser.get_detected_malwares()
        self.parser.get_hashes_of_detected_malwares()
        self.output_file.write("\n\n")
    